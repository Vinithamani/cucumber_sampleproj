// should send dom and location when check region by selector
const cwd = process.cwd()
const path = require('path')
const assert = require('assert')
const spec = require(path.resolve(cwd, 'src/spec-driver'))
const {testSetup, getTestInfo, getDom} = require('@applitools/sdk-shared')

describe('Coverage Tests - ShouldSendDomAndLocationWhenCheckRegionBySelector', () => {
  let driver, destroyDriver, eyes

  beforeEach(async () => {
    ;[driver, destroyDriver] = await spec.build({browser: 'chrome'})
    eyes = testSetup.getEyes({
      vg: false,
      displayName: 'should send dom and location when check region by selector',
      baselineName: 'ShouldSendDomAndLocationWhenCheckRegionBySelector',
    })
  })

  afterEach(async () => {
    await destroyDriver(driver)
    await eyes.abort()
  })

  it('should send dom and location when check region by selector', async () => {
    await spec.visit(
      driver,
      'https://applitools.github.io/demo/TestPages/FramesTestPage/'
    )
    await eyes.open(
      driver,
      'Applitools Eyes SDK',
      'ShouldSendDomAndLocationWhenCheckRegionBySelector',
      {width: 700, height: 460}
    )
    const element = await spec.findElement(driver, '#centered')
    await spec.executeScript(
      driver,
      'arguments[0].setAttribute("data-expected-target", "true");',
      ...[element]
    )
    await eyes.check({region: element, isFully: false})
    const result = await eyes.close(false)
    const info = await getTestInfo(result)
    assert.deepStrictEqual(
      info['actualAppOutput']['0']['image']['hasDom'],
      true,
      undefined
    )
    const dom = await getDom(
      result,
      info['actualAppOutput']['0']['image']['domId']
    )
    const scrollingElements = dom.getNodesByAttribute('data-applitools-scroll')
    assert.deepStrictEqual(scrollingElements['length'], 0, undefined)
    const targetElement = dom.getNodesByAttribute('data-expected-target')

    assert.deepStrictEqual(
      info['actualAppOutput']['0']['image']['location']['x'],
      Math.round(targetElement['0']['rect']['left']) || 0,
      undefined
    )

    assert.deepStrictEqual(
      info['actualAppOutput']['0']['image']['location']['y'],
      Math.round(targetElement['0']['rect']['top']) || 0,
      undefined
    )
  })
})
