// appium iOS check region with ignore region
const cwd = process.cwd()
const path = require('path')
const assert = require('assert')
const spec = require(path.resolve(cwd, 'src/spec-driver'))
const {testSetup, getTestInfo, getDom} = require('@applitools/sdk-shared')

describe('Coverage Tests - AppiumIOSCheckRegionWithIgnoreRegion', () => {
  let driver, destroyDriver, eyes

  beforeEach(async () => {
    ;[driver, destroyDriver] = await spec.build({
      device: 'iPhone XS',
      app:
        'https://applitools.bintray.com/Examples/eyes-ios-hello-world/1.2/eyes-ios-hello-world.zip',
    })
    eyes = testSetup.getEyes({
      displayName: 'appium iOS check region with ignore region',
      baselineName: 'Appium_iOS_CheckRegionWithIgnoreRegion',
      branchName: 'javascript_mobile',
    })
  })

  afterEach(async () => {
    await destroyDriver(driver)
    await eyes.abort()
  })

  it('appium iOS check region with ignore region (@native-selectors @mobile @native)', async () => {
    await spec.click(driver, {
      type: '-ios predicate string',
      selector: "type == 'XCUIElementTypeButton'",
    })
    await eyes.open(
      driver,
      'Applitools Eyes SDK',
      'Appium_iOS_CheckRegionWithIgnoreRegion',
      undefined
    )
    await eyes.check({
      region: {type: 'accessibility id', selector: 'BottomContainer'},
      ignoreRegions: [
        {type: 'accessibility id', selector: 'BottomLabel'},
        {type: 'accessibility id', selector: 'BottomImage'},
      ],
    })
    const var_4 = await eyes.close(undefined)
    const var_5 = await getTestInfo(var_4)
    assert.deepStrictEqual(
      var_5['actualAppOutput']['0']['imageMatchSettings']['ignore']['0'],
      {left: 0, top: 0, width: 343, height: 21},
      undefined
    )
    assert.deepStrictEqual(
      var_5['actualAppOutput']['0']['imageMatchSettings']['ignore']['1'],
      {left: 115, top: 35, width: 113, height: 65},
      undefined
    )
  })
})
